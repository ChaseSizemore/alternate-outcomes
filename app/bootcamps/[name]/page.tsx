'use client';
import {
  BuildingOffice2Icon,
  MapIcon,
  CurrencyDollarIcon,
} from '@heroicons/react/20/solid';
import { use, useEffect, useState } from 'react';
import Table from '@/components/Table';
import axios from 'axios';
import { getAverageSalary, handleWebsiteClick } from '@/utils/utilityFunctions';
import ErrorBarWithActions from '@/components/ErrorBarWithActions';
import LinearProgress from '@mui/material/LinearProgress';

export default function Bootcamp({ params }: any) {
  const [outcomes, setOutcomes] = useState<any[] | null>(null);
  const [bootcamp, setBootcamp] = useState<any>(null);
  const [averageSalary, setAverageSalary] = useState('');
  const [recentCompanies, setRecentCompanies] = useState([]);
  const [recentLocations, setRecentLocations] = useState([]);

  const cards = [
    {
      name: 'Average Salary',
      icon: CurrencyDollarIcon,
      description: `${averageSalary}`,
    },
    {
      name: 'Recent Companies',
      description: `${recentCompanies.join(', ')}`,
      icon: BuildingOffice2Icon,
    },
    {
      name: 'Locations ',
      description: `${recentLocations.join(', ')}`,
      icon: MapIcon,
    },
  ];

  /**
   * Fetches the bootcamp data from the server based on the name.
   * @returns {Promise<void>} A Promise that resolves when the bootcamp data is fetched successfully.
   */
  const getBootcamp = async () => {
    axios
      .get('/api/bootcamps', {
        params: {
          name: params.name.replace(/-/g, ' '),
        },
      })
      .then((res) => {
        setBootcamp(res.data[0]);
      })
      .catch((err) => {
        console.log(err);
      })
      .finally(() => {
        console.log('bootcamp data fetched');
      });
  };

  /**
   * Fetches outcomes data from the server and sets the outcomes state and average salary state.
   * @returns {Promise<void>}
   */
  const getOutcomes = async () => {
    axios
      .get('/api/outcomes')
      .then((res) => {
        const bootcamp: any = [];
        res.data.forEach((item: any) => {
          if (item.bootcamp.toLowerCase() === params.name.replace(/-/g, ' ')) {
            bootcamp.push(item);
          }
        });
        setOutcomes(bootcamp);
        setAverageSalary(getAverageSalary(bootcamp));
        setRecentCompanies(
          Array.from(new Set(bootcamp.map((item: any) => item.company))).slice(
            0,
            3
          )
        );
        setRecentLocations(
          Array.from(new Set(bootcamp.map((item: any) => item.location))).slice(
            0,
            3
          )
        );
      })
      .catch((err) => {
        console.log(err);
      });
  };

  useEffect(() => {
    getOutcomes();
    getBootcamp();
  }, []);

  if (!bootcamp || !outcomes) {
    return <LinearProgress />;
  } else {
    return (
      <div className="relative isolate overflow-hidden py-24 sm:py-32">
        <div className="mx-auto max-w-7xl px-6 lg:px- item flex flex-col justify-center items-center">
          <div className="mx-auto max-w-2xl lg:mx-0 flex flex-col justify-center items-center">
            <h2 className="text-4xl font-bold tracking-tigh sm:text-6xl">
              {params.name
                .replace(/-/g, ' ')
                .replace(/\b\w/g, (c: any) => c.toUpperCase())}
            </h2>
            <p className="mx-auto my-6 max-w-2xl text-md tracking-tight text-slate-700 text-center">
              {bootcamp.description}
            </p>
            <div
              className="flex items-center p-4 mb-2 mt-2 text-sm text-blue-800 borde rounded-lg bg-blue-50 dark:text-blue-400 dark:border-blue-800"
              role="alert"
            >
              <svg
                className="flex-shrink-0 inline w-4 h-4 mr-3"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
              </svg>
              <span className="sr-only">Info</span>
              <div>
                Description was generated by Google's Bard AI. Please double
                check information on the bootcamp's website{' '}
                <span
                  onClick={() => {
                    handleWebsiteClick(bootcamp);
                  }}
                  className="underline cursor-pointer"
                >
                  here
                </span>
                . If there is any incorrect information, submit a notice{' '}
                <span
                  onClick={() => {
                    window.location.href = '/feedbackForm';
                  }}
                  className="underline cursor-pointer"
                >
                  here
                </span>
                .
              </div>
            </div>
          </div>
          {outcomes && outcomes.length ? (
            <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-6 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-3 lg:gap-8">
              {cards.map((card) => (
                <div
                  key={card.name}
                  className="flex gap-x-4 rounded-xl bg-white/5 p-6 ring-1 ring-inset ring-white/10"
                >
                  <card.icon
                    className="h-7 w-5 flex-none text-indigo-400"
                    aria-hidden="true"
                  />
                  <div className="text-base leading-7">
                    <h3 className="font-semibold">{card.name}</h3>
                    <p className="mt-2">{card.description}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <ErrorBarWithActions />
          )}
        </div>
        {outcomes && outcomes.length ? (
          <div className="md:mx-20 my-20">
            <Table outcomes={outcomes} />
          </div>
        ) : (
          <></>
        )}
      </div>
    );
  }
}
